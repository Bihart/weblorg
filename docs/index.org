#+OPTIONS: toc:nil num:nil

Aliquam erat volutpat.  Nunc eleifend leo vitae magna.  In id erat non orci commodo lobortis.  Proin neque massa, cursus ut, gravida ut, lobortis eget, lacus.  Sed diam.  Praesent fermentum tempor tellus.  Nullam tempus.  Mauris ac felis vel velit tristique imperdiet.  Donec at pede.  Etiam vel neque nec dui dignissim bibendum.  Vivamus id enim.  Phasellus neque orci, porta a, aliquet quis, semper a, massa.  Phasellus purus.  Pellentesque tristique imperdiet tortor.  Nam euismod tellus id erat.

* Highlights
  :PROPERTIES:
  :HTML_CONTAINER_CLASS: features no-heading
  :END:

** Pure Emacs Lisp
:PROPERTIES:
:HTML_CONTAINER_CLASS: feature
:END:
No python, ruby, go or other language

** Static
:PROPERTIES:
:HTML_CONTAINER_CLASS: feature
:END:
org, templatel, HTML & CSS.
Everyting inside your emacs!

** Powered by Templatel
:PROPERTIES:
:HTML_CONTAINER_CLASS: feature
:END:
[[Https://clarete.li/templatel/][templatel]] is the modern templating language that was missing for Emacs-Lisp. It provides variable substitution and control flow through a clean and powerful language inspired by Python's Jinja.

** Blog ready
:PROPERTIES:
:HTML_CONTAINER_CLASS: feature
:END:
Permalink, categories, pages, posts and custom layouts.

* Getting started

This is the minimal structure for a blog powered by Blorg!

#+begin_src shell
blog/
├── pages
│   └── about.org
├── posts
│   └── my-first-post.org
└── publish.el
#+end_src

On publish.el is the Blorg configuration file, you can configure routes, theme and other things. This is the minimal setup for a blog.

#+begin_src lisp
(use-package blorg)
(use-package templatel)
;; Org-Mode depends on `htmlize' in order to produce HTML off Org-Mode
;; blocks with syntax highlighting.
(use-package htmlize)

;; Tells `htmlize' library to output HTML with css classes instead of
;; directly formatting the output.
(setq org-html-htmlize-output-type 'css)

;; Generate blog posts
(blorg-route
 :name "posts"
 :input-pattern "posts/.*\\.org$"
 :template "post.html"
 :output "output/posts/{{ slug }}.html"
 :url "/posts/{{ slug }}.html")

;; Generate pages
(blorg-route
 :name "pages"
 :input-pattern "pages/.*\\.org$"
 :template "page.html"
 :output "output/{{ slug }}/index.html"
 :url "/{{ slug }}")

;; Generate posts summary
(blorg-route
 :name "index"
 :input-pattern "posts/.*\\.org$"
 :input-aggregate #'blorg-input-aggregate-all
 :template "blog.html"
 :output "output/index.html"
 :url "/")

(blorg-copy-static
 :output "output/static/{{ file }}"
 :url "/static/{{ file }}")

(blorg-export)
#+end_src

To generate your blog touched by unicorn just run

#+begin_src shell
emacs --script publish.el 2>&1
#+end_src

* Theming
Blorg came with a default theme for you can focus on content, but if you want to create modify existing template just create a folder *templates* on the same level of ~publish.el~
